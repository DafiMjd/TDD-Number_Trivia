// Mocks generated by Mockito 5.4.4 from annotations
// in number_trivia/test/features/number_trivia/data/datasources/number_trivia_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:isar/isar.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIsarCollection_1<OBJ> extends _i1.SmartFake
    implements _i3.IsarCollection<OBJ> {
  _FakeIsarCollection_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Isar].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsar extends _i1.Mock implements _i3.Isar {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void requireOpen() => super.noSuchMethod(
        Invocation.method(
          #requireOpen,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Future<T> txn<T>(_i2.Future<T> Function()? callback) =>
      (super.noSuchMethod(
        Invocation.method(
          #txn,
          [callback],
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #txn,
                  [callback],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #txn,
                [callback],
              ),
            ),
        returnValueForMissingStub: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #txn,
                  [callback],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #txn,
                [callback],
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<T> writeTxn<T>(
    _i2.Future<T> Function()? callback, {
    bool? silent = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeTxn,
          [callback],
          {#silent: silent},
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #writeTxn,
                  [callback],
                  {#silent: silent},
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #writeTxn,
                [callback],
                {#silent: silent},
              ),
            ),
        returnValueForMissingStub: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #writeTxn,
                  [callback],
                  {#silent: silent},
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #writeTxn,
                [callback],
                {#silent: silent},
              ),
            ),
      ) as _i2.Future<T>);

  @override
  T txnSync<T>(T Function()? callback) => (super.noSuchMethod(
        Invocation.method(
          #txnSync,
          [callback],
        ),
        returnValue: _i4.dummyValue<T>(
          this,
          Invocation.method(
            #txnSync,
            [callback],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<T>(
          this,
          Invocation.method(
            #txnSync,
            [callback],
          ),
        ),
      ) as T);

  @override
  T writeTxnSync<T>(
    T Function()? callback, {
    bool? silent = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeTxnSync,
          [callback],
          {#silent: silent},
        ),
        returnValue: _i4.dummyValue<T>(
          this,
          Invocation.method(
            #writeTxnSync,
            [callback],
            {#silent: silent},
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<T>(
          this,
          Invocation.method(
            #writeTxnSync,
            [callback],
            {#silent: silent},
          ),
        ),
      ) as T);

  @override
  void attachCollections(Map<Type, _i3.IsarCollection<dynamic>>? collections) =>
      super.noSuchMethod(
        Invocation.method(
          #attachCollections,
          [collections],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.IsarCollection<T> collection<T>() => (super.noSuchMethod(
        Invocation.method(
          #collection,
          [],
        ),
        returnValue: _FakeIsarCollection_1<T>(
          this,
          Invocation.method(
            #collection,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeIsarCollection_1<T>(
          this,
          Invocation.method(
            #collection,
            [],
          ),
        ),
      ) as _i3.IsarCollection<T>);

  @override
  _i3.IsarCollection<dynamic>? getCollectionByNameInternal(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollectionByNameInternal,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as _i3.IsarCollection<dynamic>?);

  @override
  _i2.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  void clearSync() => super.noSuchMethod(
        Invocation.method(
          #clearSync,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Future<int> getSize({
    bool? includeIndexes = false,
    bool? includeLinks = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSize,
          [],
          {
            #includeIndexes: includeIndexes,
            #includeLinks: includeLinks,
          },
        ),
        returnValue: _i2.Future<int>.value(0),
        returnValueForMissingStub: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);

  @override
  int getSizeSync({
    bool? includeIndexes = false,
    bool? includeLinks = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSizeSync,
          [],
          {
            #includeIndexes: includeIndexes,
            #includeLinks: includeLinks,
          },
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i2.Future<void> copyToFile(String? targetPath) => (super.noSuchMethod(
        Invocation.method(
          #copyToFile,
          [targetPath],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<bool> close({bool? deleteFromDisk = false}) => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#deleteFromDisk: deleteFromDisk},
        ),
        returnValue: _i2.Future<bool>.value(false),
        returnValueForMissingStub: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);

  @override
  _i2.Future<void> verify() => (super.noSuchMethod(
        Invocation.method(
          #verify,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}
